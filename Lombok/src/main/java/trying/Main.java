package trying;

import lombok.Cleanup;
import trying.constructors.AllArgsConstructors;
import trying.constructors.NoArgsConstructors;
import trying.constructors.RequiredArgConstructors;

import java.io.*;

public class Main {

	public static void main(String[] args) {


		//setters and getters autogenerated
		GetterSetter setterObject = new GetterSetter();
		setterObject.setVal1("value");
		setterObject.getVal1();
		//setterObject.setval2(); //defined as private

		////////////////////////////////
		//not null check
		try {
			NotNull notNullObject = new NotNull(null);
		} catch (NullPointerException exp) {
			System.out.println("null pointer");
		}
		NotNull notNullObject = new NotNull("value");

		try {
			notNullObject.setNotNull(null);
		} catch (NullPointerException exp) {
			System.out.println("null pointer");
		}


		////////////////////////////////
		//noArgConstructor autogenerated
		NoArgsConstructors noArgsObject = new NoArgsConstructors("value"); //defined
		noArgsObject = new NoArgsConstructors(); //autogenerated

		//allArgsConstructor autogenerated, 1 arg for every field
		AllArgsConstructors allArgsObject = new AllArgsConstructors("value", 1);

		//requiredArgsConstructor autogenerated, 1 args for every field not final and static not initialized in definition and notNull
		RequiredArgConstructors requiredArgObject = new RequiredArgConstructors(1,2l);

		////////////////////////////////
		//cleanup
		//at the end of the scope of the resources defenition close() will be called
		try {
			String values = "values";

			@Cleanup InputStream in = new ByteArrayInputStream(values.getBytes());
			@Cleanup OutputStream out = new ByteArrayOutputStream(50);
			byte[] b = new byte[10000];
			while (true) {
				int r = in.read(b);
				if (r == -1) break;
				out.write(b, 0, r);
			}
		}catch (FileNotFoundException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		}

		////////////////////////////////
		//toString
		ToString toStringObject = new ToString();
		System.out.println(toStringObject.toString());

		////////////////////////////////
		//data, shortcut for:
		//@ToString, @EqualsAndHashCode, @Getter on all fields, @Setter on all non-final fields, and @RequiredArgsConstructor

		Data dataObject = new Data("value");

		dataObject.setVar1("value");
		dataObject.setVar2(1);

		dataObject.getVar1();
		dataObject.getVar2();

		//values, shortcut for:
		//final @ToString @EqualsAndHashCode @AllArgsConstructor @FieldDefaults(makeFinal = true, level = AccessLevel.PRIVATE) @Getter

		Value valueObject = new Value("value",1);

		//valueObject.setVal1(); //no setter

		valueObject.getVar1();
		valueObject.getVar2();

		////////////////////////////////
		//builder
		//autogenerate all field builder
		Builder builderObject = Builder.builder().val2("value").val1(1).build();

		////////////////////////////////
		//with
		//used in class with immutability. generate method that creates new object with changed field value
		With withObject = new With(1, "value");
		withObject = withObject.withVar1(2); //new object with changed value var1



	}
}
